{"optimized_code": "/*\n\nCode By RyeCatcher\n\n*/\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define ll long long\n\nconst int MAXN = 200005;\n\nint n, nn;\nint a[MAXN], b[MAXN], c[MAXN];\nint mx = INT_MIN, mi = INT_MAX;\nll sum[MAXN];\n\ninline void update(int x, int d) {\n    for (; x <= nn; x += x & -x) sum[x] += d;\n}\n\ninline ll query(int x) {\n    ll ans = 0;\n    for (; x > 0; x -= x & -x) ans += sum[x];\n    return ans;\n}\n\ninline ll chk(int k) {\n    ll ans = 0;\n    b[0] = 0;\n    for (int i = 1; i <= n; ++i) {\n        b[i] = b[i - 1] + ((a[i] <= k) ? 1 : -1);\n        c[i] = b[i];\n        ans += (b[i] > 0);\n    }\n\n    sort(c + 1, c + n + 1);\n    nn = unique(c + 1, c + n + 1) - (c + 1);\n    fill(sum + 1, sum + nn + 1, 0);\n\n    for (int i = 1; i <= n; ++i) {\n        b[i] = lower_bound(c + 1, c + nn + 1, b[i]) - c;\n        ans += query(b[i] - 1);\n        update(b[i], 1);\n    }\n\n    return ans;\n}\n\nint main() {\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; ++i) {\n        scanf(\"%d\", &a[i]);\n        mi = min(mi, a[i]);\n        mx = max(mx, a[i]);\n    }\n\n    int L = mi, R = mx, mid, ans;\n    ll lim = 1LL * n * (n + 1) / 4 + 1;\n\n    while (L <= R) {\n        mid = (L + R) >> 1;\n        if (chk(mid) >= lim) ans = mid, R = mid - 1;\n        else L = mid + 1;\n    }\n\n    printf(\"%d\\n\", ans);\n    return 0;\n}"}