```cpp
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <queue>
#include <vector>
#include <map>
#define mem(u, v) memset(u, v, sizeof(u))
#define INF 0x3f3f3f3f
#define pii pair<int, int >
#define LL long long
#define mid (l + r) / 2
#define lowbit(x) x & -x
using namespace std;

const int MAXN = 1e6 + 7,  MAXM = 1e6 + 7, MAXK = 1e6 + 7;

struct node {
    int val;
    int pos;
} a[MAXN], b[MAXN];

int sum[MAXN], c[MAXN], n;
LL ans0;

bool cmp(const node &x, const node &y){
    return x.val < y.val;
}

void add(int x){
    while (x <= 5 * n){
        c[x] += 1;
        x += lowbit(x);
    }
}

int get(int x){
    int y = 0;
    while (x > 0){
        y += c[x];
        x -= lowbit(x);
    }
    return y;
}

bool judge(int x){
    sum[0] = 0;
    for (int i = 1; i <= n; i++){
        if (a[i].val >= x) sum[i] = sum[i - 1] + 1;
        else sum[i] = sum[i - 1];
    }
    for (int i = 0; i <= n; i++) sum[i] = 2 * sum[i] - i + n + 1;
    LL ans1 = 0;
    mem(c, 0);
    for (int i = 0; i <= n; i++){
        ans1 += get(sum[i]);
        add(sum[i]);
    }
    return ans1 >= ans0;
}

int main(){
    scanf("%d", &n);
    for (int i = 1; i <= n; i++) {
        scanf("%d", &a[i].val);
        a[i].pos = i;
        b[i] = a[i];
    }
    sort(b + 1, b + n + 1, cmp);
    int l = 1, r = n, ans = 0;
    ans0 = (1LL * n * (n - 1) / 2 + n + 1) / 2LL;
    while (l <= r){
        int m = mid;
        if (judge(b[m].val)) {
            ans = m;
            l = m + 1;
        }
        else {
            r = m - 1;
        }
    }
    printf("%d\n", b[ans].val);
    return 0;
}
```