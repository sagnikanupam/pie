```cpp
#include <bits/stdc++.h>

using namespace std;

const double EPS = 1e-10;
const int INF = 1e9 + 100;
const int N = 1e6 + 10;

int a[N], b[N];
int n, tt;

namespace BIT {
    const int SIZE = 4 * N;
    long long f[4 * N];

    void Reset() {
        memset(f, 0, sizeof(f));
    }

    void Add(int x) {
        while (x <= 4 * n) {
            f[x] += 1;
            x += (x & -x);
        }
    }

    int Query(int x) {
        int ans = 0;
        while (x > 0) {
            ans += f[x];
            x -= (x & -x);
        }
        return ans;
    }
}

bool check(int k) {
    static long long Ans = 0;
    BIT::Reset();
    Ans = 0;
    b[0] = 0;

    for(int i = 1; i <= n; i++) {
        if (a[i] >= k)
            b[i] = b[i - 1] + 1;
        else
            b[i] = b[i - 1];
    }

    for(int i = 0; i <= n; i++) {
        b[i] = 2 * b[i] - i + n + 1;
    }

    for(int i = 0; i <= n; i++) {
        Ans += BIT::Query(b[i]);
        BIT::Add(b[i]);
    }

    long long total = (1LL * n * (n + 1)) / 2;
    return Ans >= (total + 1) / 2;
}

int main() {
    scanf("%d", &n);
    int min_val = INF, max_val = -INF;

    for(int i = 1; i <= n; i++) {
        scanf("%d", &a[i]);
        if(a[i] < min_val) min_val = a[i];
        if(a[i] > max_val) max_val = a[i];
    }

    int l = min_val, r = max_val;
    int ans = 0;

    while(l <= r) {
        int mid = (l + r) / 2;
        if(check(mid)) {
            ans = mid;
            l = mid + 1;
        }
        else {
            r = mid - 1;
        }
    }

    printf("%d\n", ans);
    return 0;
}
```