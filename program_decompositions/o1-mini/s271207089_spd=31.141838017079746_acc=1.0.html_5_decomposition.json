{"optimized_code": "#include <bits/stdc++.h>\n \n #define ll long long\n \n #define MN 100005\n \n using namespace std;\n \n \n \n // Efficient input reading functions\n \n inline int read() {\n \n     int x = 0;\n \n     bool f = false;\n \n     char c = getchar();\n \n     while (c < '0' || c > '9') { \n \n         if (c == '-') f = true; \n \n         c = getchar(); \n \n     }\n \n     while (c >= '0' && c <= '9') { \n \n         x = x * 10 + (c - '0'); \n \n         c = getchar(); \n \n     }\n \n     return f ? -x : x;\n \n }\n \n \n \n inline ll readl() {\n \n     ll x = 0;\n \n     bool f = false;\n \n     char c = getchar();\n \n     while (c < '0' || c > '9') { \n \n         if (c == '-') f = true; \n \n         c = getchar(); \n \n     }\n \n     while (c >= '0' && c <= '9') { \n \n         x = x * 10 + (c - '0'); \n \n         c = getchar(); \n \n     }\n \n     return f ? -x : x;\n \n }\n \n \n \n int c_tree[200005];\n \n int a[MN];\n \n int n;\n \n ll num;\n \n \n \n // Binary Indexed Tree operations\n \n inline void add(int x, int v){\n \n     while(x <= ((n << 1) | 1)){\n \n         c_tree[x] += v;\n \n         x += x & -x;\n \n     }\n \n }\n \n \n \n inline int query(int x){\n \n     int res = 0;\n \n     while(x > 0){\n \n         res += c_tree[x];\n \n         x -= x & -x;\n \n     }\n \n     return res;\n \n }\n \n \n \n // Optimized check function\n \n inline bool check(int threshold){\n \n     // Reset the Fenwick Tree\n \n     memset(c_tree, 0, sizeof(int) * (((n << 1) | 1) + 1));\n \n     add(n + 1, 1);\n \n     num = 0LL;\n \n     int sum = 0;\n \n     \n \n     for(int i = 1; i <= n; ++i){\n \n         sum += (a[i] > threshold);\n \n         int d_i = 2 * sum - i + n + 1;\n \n         if(d_i < 0) d_i = 0;\n \n         num += (ll)(query(((n << 1) | 1)) - query(d_i));\n \n         add(d_i, 1);\n \n     }\n \n     \n \n     return (num > ((ll)n * (n + 1)) / 4LL);\n \n }\n \n \n \n int main(){\n \n     ios::sync_with_stdio(false);\n \n     cin.tie(nullptr);\n \n     \n \n     n = read();\n \n     int max_val = INT32_MIN;\n \n     int min_val = INT32_MAX;\n \n     for(int i = 1; i <= n; ++i){\n \n         a[i] = read();\n \n         if(a[i] > max_val) max_val = a[i];\n \n         if(a[i] < min_val) min_val = a[i];\n \n     }\n \n     \n \n     int l = min_val;\n \n     int r = max_val;\n \n     int res = max_val;\n \n     \n \n     while(l <= r){\n \n         int mid = l + ((r - l) >> 1);\n \n         if(check(mid)){\n \n             res = mid;\n \n             r = mid - 1;\n \n         }\n \n         else{\n \n             l = mid + 1;\n \n         }\n \n     }\n \n     \n \n     printf(\"%d\", res);\n \n     return 0;\n \n }\n"}