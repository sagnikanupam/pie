```cpp
#include <bits/stdc++.h>
#include <cstdarg>
#include <cstdio>

using namespace std;

// Debugging macros
#ifdef DEBUG
    #define DEBUG_PRINT(...) debug_print(__VA_ARGS__)
#else
    #define DEBUG_PRINT(...)
#endif

typedef long long ll;

const int inf = 0x3f3f3f3f;

// Macro for forward loops
#define forn(i, a, b) for(int i = a; i < b; ++i)

// Debug print function with variadic templates
void debug_print(const char* format, ...) {
    va_list args;
    va_start(args, format);
    vfprintf(stderr, format, args);
    va_end(args);
}

// Efficient read function
void read(vector<ll> &v, int start, int end){
    forn(i, start, end){
        ll x = 0;
        int c = getchar();
        // Skip non-digit and non-minus characters
        while((c < '0' || c > '9') && c != '-' && c != EOF){
            c = getchar();
        }
        bool neg = false;
        if(c == '-'){
            neg = true;
            c = getchar();
        }
        while(c >= '0' && c <= '9'){
            x = x * 10 + (c - '0');
            c = getchar();
        }
        if(neg) x = -x;
        v[i] = x;
        DEBUG_PRINT("Read arr[%d] = %lld\n", i, x);
    }
}

// Custom input function replacing cin
void read_input(int &n, int &k){
    n = 0;
    k = 0;
    int c = getchar();
    // Read n
    while((c < '0' || c > '9') && c != EOF){
        c = getchar();
    }
    while(c >= '0' && c <= '9'){
        n = n * 10 + (c - '0');
        c = getchar();
    }
    DEBUG_PRINT("Input n = %d\n", n);
    // Read k
    while((c < '0' || c > '9') && c != EOF){
        c = getchar();
    }
    while(c >= '0' && c <= '9'){
        k = k * 10 + (c - '0');
        c = getchar();
    }
    DEBUG_PRINT("Input k = %d\n", k);
}

// Custom output function replacing cout
void print_output(ll value){
    printf("%lld\n", value);
    DEBUG_PRINT("Output dp[%d] = %lld\n", -1, value); // -1 indicates the final output
}

int main()
{
    // Removed synchronization with stdio and cin as they are not used
    int n, k;
    read_input(n, k);
    
    // Allocate memory once using assign with zero-based indexing
    vector<ll> arr(n, 0);
    vector<ll> dp(n, inf);
    
    read(arr, 0, n);
    if(n > 0){
        dp[0] = 0;
        DEBUG_PRINT("Initialized dp[0] = 0\n");
    }
    forn(i, 1, n)
    {
        int lower = max(0, i - k);
        forn(j, lower, i)
        {
            dp[i] = min(dp[i], dp[j] + abs(arr[i] - arr[j]));
            DEBUG_PRINT("dp[%d] = min(dp[%d]=%lld, dp[%d]=%lld + |%lld - %lld|=%lld) --> dp[%d]=%lld\n",
                        i, j, dp[j], j, dp[j], arr[i], arr[j], abs(arr[i] - arr[j]), i, dp[i]);
        }
    }
    if(n > 0){
        print_output(dp[n-1]);
    }
}
```