{"optimized_code": "#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#include <vector>\n\n#define mem(u, v) memset(u, v, sizeof(u))\n#define INF 0x3f3f3f3f\n#define LL long long\n#define mid (l + r) / 2\n#define lowbit(x) x & -x\n\nusing namespace std;\n\nconst int MAXN = 1e6 + 7;\n\nstruct Node {\n    LL value; // Changed from int to long long\n    int position;\n    bool operator<(const Node &other) const {\n        return value < other.value;\n    }\n};\n\nNode a[MAXN];\nint c[MAXN], n;\nLL ans0;\n\nvoid update(int x, int delta) {\n    while (x <= 5 * n) {\n        c[x] += delta;\n        x += lowbit(x);\n    }\n}\n\nint getsum(int x) {\n    int y = 0;\n    while (x > 0) {\n        y += c[x];\n        x -= lowbit(x);\n    }\n    return y;\n}\n\nbool check(LL x) { // Changed int to long long\n    vector<int> sumIndexes(n + 1);\n    int sum = 0;\n    mem(c, 0);\n    for (int i = 1; i <= n; ++i) {\n        sum += (a[i].value >= x ? 1 : -1);\n        sumIndexes[i] = sum + n + 1;\n    }\n    sumIndexes[0] = n + 1; // for initial position\n    LL ans1 = 0;\n    for (int i = 0; i <= n; ++i) {\n        ans1 += getsum(sumIndexes[i]);\n        update(sumIndexes[i], 1);\n    }\n    return ans1 >= ans0;\n}\n\nint main() {\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; ++i) {\n        scanf(\"%lld\", &a[i].value); // Changed %d to %lld\n        a[i].position = i;\n    }\n    sort(a + 1, a + n + 1);\n\n    int l = 1, r = n, ans = 0;\n    ans0 = (1LL * n * (n - 1) / 2 + n + 1) / 2LL;\n\n    while (l <= r) {\n        if (check(a[mid].value)) ans = mid, l = mid + 1;\n        else r = mid - 1;\n    }\n\n    printf(\"%lld\\n\", a[ans].value); // Changed %d to %lld\n\n    return 0;\n}"}