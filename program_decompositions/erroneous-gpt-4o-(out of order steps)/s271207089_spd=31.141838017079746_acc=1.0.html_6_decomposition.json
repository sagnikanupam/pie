{"optimized_code": "#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define ll long long\n#define int long long\n#define MN 100005\nusing namespace std;\n\ninline int read(){\n    int x = 0; char c;\n    while ((c = getchar()) < '0' || c > '9');\n    do { x = x * 10 + c - '0'; } while ((c = getchar()) >= '0' && c <= '9');\n    return x;\n}\n\nint c[MN*10],sum[MN],a[MN],b[MN];\nint n,tot,l,r,res;\nll num;\n\ninline void add(int x,int v){\n    for (; x<=n*10; x+=x&(-x)) c[x]+=v; \n}\n\ninline int query(int x){\n    int res=0;\n    for (; x; x-=x&(-x)) res += c[x];\n    return res;\n}\n\ninline bool check(int x){\n    memset(c,0,sizeof(c));\n    int currentSum = 0;\n    add(n+1, 1); // Single add for initial state\n    num = 0ll;\n    for (int i=1; i<=n; ++i) {\n        currentSum += (a[i] > b[x]) ? 1 : -1;\n        int index = (currentSum << 1) - i + n + 1;\n        num += query(n*10) - query(index);\n        add(index, 1);\n    }\n    return (num > 1ll*(n*(n+1ll))/4ll);\n}\n\nsigned main()\n{\n    n=read();\n    for (int i=1; i<=n; ++i) a[i]=b[i]=read();\n    tot=unique(b+1,b+n+1)-b-1;\n\n    // Optimization: Find max element efficiently\n    r = max_element(b+1, b+tot+1) - b;\n    l=0; res=0;\n    while (l<=r){\n        int mid=(l+r)>>1;\n        if (check(mid)) res=mid,r=mid-1;\n        else l=mid+1;\n    }\n    printf(\"%d\",b[res]);return 0;\n}\n"}