{"optimized_code": "#include <iostream>\n#include <algorithm>\n\nconst int N = 1e6+10;\n\nint a[N], b[N], c[N];\nlong long f[N << 2];\n\nint n;\nbool b_calculated = false;\nint last_k = -1;\n\nvoid Add(int x) {\n    while (x <= 4 * n) {\n        f[x] += 1;\n        x += (x & (-(x)));\n    }\n}\n\nint Query(int x) {\n    int ans = 0;\n    while (x > 0) {\n        ans += f[x];\n        x -= (x & (-(x)));\n    }\n    return ans; \n}\n\nvoid calculate_b(int k) {\n    if (b_calculated && last_k == k) return;\n    b_calculated = true;\n    last_k = k;\n    b[0] = 0;\n    for (int i = 1; i <= n; i++) {\n        if (a[i] >= c[k]) b[i] = b[i-1] + 1; else b[i] = b[i-1];\n    }\n    for (int i = 0; i <= n; i++) {\n        b[i] = 2 * b[i] - i + n + 1;\n    }\n}\n\nbool check(int k) {\n    calculate_b(k);\n    memset(f, 0, sizeof(f));\n    long long Ans = 0;\n    for (int i = 0; i <= n; i++) {\n        Ans += Query(b[i]);\n        Add(b[i]);\n    }\n    long long t = (1LL * n * (n + 1)) / 2;\n    return Ans >= (t + 1) / 2;\n}\n\nint main() {\n    std::cin >> n;\n    for (int i = 1; i <= n; i++) {\n        std::cin >> a[i];\n        c[i] = a[i]; // Fill c array for later use\n    }\n    std::sort(c + 1, c + n + 1);\n    int l = c[1], r = c[n]; // Update left and right to min and max of a\n    int ans = 0;\n    while (l <= r) {\n        int mid_value = (l + r) >> 1;\n        auto it = std::lower_bound(c + 1, c + n + 1, mid_value);\n        int k = it - c; // Find the index equivalent in original sorted array\n        if (check(k)) {\n            l = mid_value + 1;\n            ans = mid_value;\n        } else {\n            r = mid_value - 1;\n        }\n    }\n    std::cout << ans << \"\\n\";\n    return 0;\n}\n"}