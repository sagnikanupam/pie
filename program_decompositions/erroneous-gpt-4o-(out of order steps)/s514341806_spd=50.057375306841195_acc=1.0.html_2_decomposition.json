{"optimized_code": "#include <bits/stdc++.h>\n\n#define mem(x,v) memset(x,v,sizeof(x)) \n\n#define go(i,a,b)  for (int i = a; i <= b; i++)\n\n#define og(i,a,b)  for (int i = a; i >= b; i--)\n\n#define MID(a,b) ((a) + (b)) >> 1\n\n#define lson (now << 1)\n\n#define rson ((now << 1) | 1)\n\n#define low(x) ((x) & (-(x)))\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst double EPS = 1e-10;\n\nconst int INF = 1e9+100;\n\nconst int N = 1e6+10;\n\nint a[N],b[N],c[N];\n\nLL f[N << 2];\n\nint n,tt;\n\nbool b_calculated = false;\nint last_k = -1;\n\nvoid Add(int x){\n\twhile(x <= 4*n){\n\t\tf[x] += 1;\n\t\tx += low(x);\n\t}\n}\n\nint Query(int x){\n\tint ans = 0;\n\twhile(x > 0) ans += f[x], x -= low(x);\n\treturn ans; \n}\n\nvoid calculate_b(int k) {\n\tif (b_calculated && last_k == k) return;\n\tb_calculated = true;\n\tlast_k = k;\n\tb[0] = 0;\n\tgo(i,1,n) if (a[i] >= c[k]) b[i] = b[i-1] + 1; else b[i] = b[i-1];\n\tgo(i,0,n) b[i] = 2*b[i] - i + n + 1;\n}\n\nbool check(int k){\n\tcalculate_b(k);\n\tmem(f,0);\n\tLL Ans = 0;\n\tgo(i,0,n) {\n\t\tAns += Query(b[i]);\n\t\tAdd(b[i]);\n\t}\n\tLL t = (1LL * n * (n + 1)) / 2;\n\treturn Ans >= (t+1)/2;\n}\n\nint main(){\n\tscanf(\"%d\",&n);\n\tint l = 1, r = n;\n\tgo(i,1,n){\n\t\tscanf(\"%d\",&a[i]);\n\t\tc[i] = a[i];\n\t}\n\tsort(c+1,c+n+1);\n\tint ans = 0;\n\twhile(l <= r){\n\t\tint mid = MID(l,r);\n\t\tif (check(mid)) l = mid+1, ans = c[mid]; else r = mid - 1;\n\t}\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n"}