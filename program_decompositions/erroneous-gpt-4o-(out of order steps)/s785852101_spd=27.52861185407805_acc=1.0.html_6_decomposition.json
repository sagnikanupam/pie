{"optimized_code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Range {\npublic:\n    class iterator {\n        int x;\n    public:\n        explicit iterator(int _x) : x(_x) {}\n        int operator*() const { return x; }\n        iterator& operator++() { ++x; return *this; }\n        bool operator!=(const iterator& other) const { return x != other.x; }\n    };\n    int l, r;\n    Range(int _l, int _r) : l(_l), r(_r) {}\n    iterator begin() const { return iterator(l); }\n    iterator end() const { return iterator(r); }\n};\n\nint main() {\n    string a, b;\n    cin >> a >> b;\n    int n = a.size(), m = b.size();\n\n    vector<vector<int>> dp(n + 1, vector<int>(m + 1));\n\n    for (int i : Range(0, m + 1)) dp[0][i] = i;\n    for (int i : Range(0, n + 1)) dp[i][0] = i;\n\n    for (int i : Range(1, n + 1)) {\n        for (int j : Range(1, m + 1)) {\n            dp[i][j] = dp[i - 1][j - 1];\n            if (a[i - 1] != b[j - 1]) dp[i][j] += 1;\n            dp[i][j] = min({dp[i][j], dp[i - 1][j] + 1, dp[i][j - 1] + 1});\n        }\n    }\n\n    cout << dp[n][m] << endl;\n\n    return 0;\n}\n"}