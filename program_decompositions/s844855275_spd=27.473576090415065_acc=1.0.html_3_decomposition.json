{"optimized_code": "#include <algorithm>\n \n #include <cstdio>\n \n #include <cstring>\n \n \n \n typedef long long LL;\n \n \n \n const int MAXN = 1000007;\n \n \n \n int a[MAXN];\n \n int sorted_indices[MAXN];\n \n int sum[MAXN], c[MAXN];\n \n int n;\n \n LL ans0;\n \n \n \n // Function to get the lowest bit\n \n inline int lowbit(int x){\n \n     return x & (-x);\n \n }\n \n \n \n // Add function for BIT\n \n void add(int x){\n \n     while (x <= 5 * n){\n \n         c[x] += 1;\n \n         x += lowbit(x);\n \n     }\n \n }\n \n \n \n // Query function for BIT\n \n int get_cnt(int x){\n \n     int res = 0;\n \n     while (x > 0){\n \n         res += c[x];\n \n         x -= lowbit(x);\n \n     }\n \n     return res;\n \n }\n \n \n \n // Judge function to check condition\n \n bool judge(int x){\n \n     sum[0] = 0;\n \n     for(int i = 1; i <= n; i++){\n \n         sum[i] = sum[i-1] + (a[i] >= x ? 1 : 0);\n \n         sum[i] = 2 * sum[i] - i + n + 1;\n \n     }\n \n     LL ans1 = 0;\n \n     memset(c, 0, sizeof(int) * (5 * n + 1));\n \n     for(int i = 0; i <= n; i++){\n \n         ans1 += get_cnt(sum[i]);\n \n         add(sum[i]);\n \n     }\n \n     return ans1 >= ans0;\n \n }\n \n \n \n int main(){\n \n     scanf(\"%d\", &n);\n \n     for(int i = 1; i <= n; i++){\n \n         scanf(\"%d\", &a[i]);\n \n         sorted_indices[i] = i;\n \n     }\n \n     std::sort(sorted_indices + 1, sorted_indices + n + 1, [&](const int x, const int y) -> bool{\n \n         return a[x] < a[y];\n \n     });\n \n     int l = 1, r = n, ans = 0;\n \n     ans0 = (1LL * n * (n - 1) / 2 + n + 1) / 2;\n \n     while(l <= r){\n \n         int m = l + (r - l) / 2;\n \n         if(judge(a[sorted_indices[m]])){\n \n             ans = m;\n \n             l = m + 1;\n \n         }\n \n         else{\n \n             r = m - 1;\n \n         }\n \n     }\n \n     printf(\"%d\\n\", a[sorted_indices[ans]]);\n \n     return 0;\n \n }\n"}