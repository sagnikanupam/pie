```cpp
#include <algorithm>
#include <cstdio>
#include <cstring>

typedef long long LL;

const int MAXN = 1000007;

int a[MAXN];
int sorted_indices[MAXN];
int sum[MAXN], c[MAXN];
int n;
LL ans0;

// Function to get the lowest bit
inline int lowbit(int x){
    return x & (-x);
}

// Add function for BIT
void add(int x){
    while (x <= 5 * n){
        c[x] += 1;
        x += lowbit(x);
    }
}

// Query function for BIT
int get_cnt(int x){
    int res = 0;
    while (x > 0){
        res += c[x];
        x -= lowbit(x);
    }
    return res;
}

// Judge function to check condition
bool judge(int x){
    sum[0] = 0;
    for(int i = 1; i <= n; i++){
        sum[i] = sum[i-1] + (a[i] >= x ? 1 : 0);
        sum[i] = 2 * sum[i] - i + n + 1;
    }
    LL ans1 = 0;
    memset(c, 0, sizeof(int) * (5 * n + 1));
    for(int i = 0; i <= n; i++){
        ans1 += get_cnt(sum[i]);
        add(sum[i]);
    }
    return ans1 >= ans0;
}

int main(){
    scanf("%d", &n);
    for(int i = 1; i <= n; i++){
        scanf("%d", &a[i]);
        sorted_indices[i] = i;
    }
    std::sort(sorted_indices + 1, sorted_indices + n + 1, [&](const int x, const int y) -> bool{
        return a[x] < a[y];
    });
    int l = 1, r = n, ans = 0;
    ans0 = (1LL * n * (n - 1) / 2 + n + 1) / 2;
    while(l <= r){
        int m = l + (r - l) / 2;
        if(judge(a[sorted_indices[m]])){
            ans = m;
            l = m + 1;
        }
        else{
            r = m - 1;
        }
    }
    printf("%d\n", a[sorted_indices[ans]]);
    return 0;
}
```