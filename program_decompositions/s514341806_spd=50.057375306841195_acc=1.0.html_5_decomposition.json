{"optimized_code": "#include <bits/stdc++.h>\n \n \n \n using namespace std;\n \n \n \n const double EPS = 1e-10;\n \n const int INF = 1e9 + 100;\n \n const int N = 1e6 + 10;\n \n \n \n int a[N], b[N];\n \n int n, tt;\n \n \n \n namespace BIT {\n \n     const int SIZE = 4 * N;\n \n     long long f[4 * N];\n \n \n \n     void Reset() {\n \n         memset(f, 0, sizeof(f));\n \n     }\n \n \n \n     void Add(int x) {\n \n         while (x <= 4 * n) {\n \n             f[x] += 1;\n \n             x += (x & -x);\n \n         }\n \n     }\n \n \n \n     int Query(int x) {\n \n         int ans = 0;\n \n         while (x > 0) {\n \n             ans += f[x];\n \n             x -= (x & -x);\n \n         }\n \n         return ans;\n \n     }\n \n }\n \n \n \n bool check(int k) {\n \n     static long long Ans = 0;\n \n     BIT::Reset();\n \n     Ans = 0;\n \n     b[0] = 0;\n \n \n \n     for(int i = 1; i <= n; i++) {\n \n         if (a[i] >= k)\n \n             b[i] = b[i - 1] + 1;\n \n         else\n \n             b[i] = b[i - 1];\n \n     }\n \n \n \n     for(int i = 0; i <= n; i++) {\n \n         b[i] = 2 * b[i] - i + n + 1;\n \n     }\n \n \n \n     for(int i = 0; i <= n; i++) {\n \n         Ans += BIT::Query(b[i]);\n \n         BIT::Add(b[i]);\n \n     }\n \n \n \n     long long total = (1LL * n * (n + 1)) / 2;\n \n     return Ans >= (total + 1) / 2;\n \n }\n \n \n \n int main() {\n \n     scanf(\"%d\", &n);\n \n     int min_val = INF, max_val = -INF;\n \n \n \n     for(int i = 1; i <= n; i++) {\n \n         scanf(\"%d\", &a[i]);\n \n         if(a[i] < min_val) min_val = a[i];\n \n         if(a[i] > max_val) max_val = a[i];\n \n     }\n \n \n \n     int l = min_val, r = max_val;\n \n     int ans = 0;\n \n \n \n     while(l <= r) {\n \n         int mid = (l + r) / 2;\n \n         if(check(mid)) {\n \n             ans = mid;\n \n             l = mid + 1;\n \n         }\n \n         else {\n \n             r = mid - 1;\n \n         }\n \n     }\n \n \n \n     printf(\"%d\\n\", ans);\n \n     return 0;\n \n }\n"}