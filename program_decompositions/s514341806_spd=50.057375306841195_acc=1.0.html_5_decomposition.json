{"optimized_code": "#include <iostream>\n#include <algorithm>\n#include <cstring>\n\nconst int N = 1e6 + 10;\n\nint a[N], b[N];\nlong long f[4 * N];\nint n;\n\nvoid Add(int x) {\n    while (x <= 4 * n) {\n        f[x] += 1;\n        x += (x & (-x));\n    }\n}\n\nint Query(int x) {\n    int ans = 0;\n    while (x > 0) {\n        ans += f[x];\n        x -= (x & (-x));\n    }\n    return ans;\n}\n\nbool check(int min_val, int max_val) {\n    std::memset(f, 0, sizeof(f));\n    long long Ans = 0;\n    b[0] = 0;\n\n    for (int i = 1; i <= n; i++) {\n        b[i] = (a[i] >= min_val) ? (b[i - 1] + 1) : b[i - 1];\n    }\n\n    for (int i = 0; i <= n; i++) {\n        b[i] = 2 * b[i] - i + n + 1;\n        Ans += Query(b[i]);\n        Add(b[i]);\n    }\n\n    long long t = (1LL * n * (n + 1)) / 2;\n    return Ans >= (t + 1) / 2;\n}\n\nint main() {\n    std::cin >> n;\n    int l = INT_MAX, r = INT_MIN;\n\n    for (int i = 1; i <= n; i++) {\n        std::cin >> a[i];\n        l = std::min(l, a[i]);\n        r = std::max(r, a[i]);\n    }\n\n    int ans = 0;\n    int low_val = l, high_val = r;\n\n    while (low_val <= high_val) {\n        int mid = (low_val + high_val) >> 1;\n        if (check(mid, mid)) low_val = mid + 1, ans = mid;\n        else high_val = mid - 1;\n    }\n\n    std::cout << ans << '\\n';\n    return 0;\n}"}