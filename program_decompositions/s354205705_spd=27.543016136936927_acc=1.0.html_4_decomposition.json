{"optimized_code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long int ll;\n\nvoid solve() {\n    int numElements, maxJump; cin >> numElements >> maxJump;\n\n    vector<int> heights(numElements + 1); // Changed to 1-indexed\n\n    for (int i = 1; i <= numElements; ++i) { // Changed to 1-indexed\n        cin >> heights[i];\n    }\n\n    vector<int> minCost(numElements + 2, INT_MAX); // Dynamic size of minCost array\n    minCost[1] = 0; // Start from index 1\n\n    for (int i = 1; i <= numElements; ++i) { // Changed to 1-indexed\n        int maxReach = min(i + maxJump, numElements); // Calculate maxReach only once\n        for (int j = 1; j <= maxReach; j++) { // Changed inner loop to run from 1 to maxReach\n            if (j > i) { // Ensure j is greater than i\n                minCost[j] = min(minCost[j], minCost[i] + abs(heights[i] - heights[j]));\n            }\n        }\n    }\n\n    cout << minCost[numElements] << \"\\n\"; // Output the result from index numElements\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    solve();\n    return 0;\n}"}