{"optimized_code": "#include <cstdio>\n \n #include <cstdlib>\n \n #include <cstring>\n \n #include <cmath>\n \n #include <algorithm>\n \n #include <iostream>\n \n #include <iomanip>\n \n #include <string>\n \n #include <vector>\n \n #include <queue>\n \n #include <map>\n \n #include <set>\n \n \n \n #define mem(x,v) memset(x,v,sizeof(x)) \n \n \n \n #define go(i,a,b)  for (int i = a; i <= b; i++)\n \n     \n \n #define og(i,a,b)  for (int i = a; i >= b; i--)\n \n     \n \n #define MID(a,b) ((a + b) >> 1)\n \n     \n \n #define lson(now) ((now) << 1)\n \n     \n \n #define rson(now) (((now) << 1) | 1)\n \n     \n \n #define low(x) ((x) & (-(x)))\n \n     \n \n using namespace std;\n \n     \n \n typedef long long LL;\n \n     \n \n const double EPS = 1e-10;\n \n     \n \n const int INF = 1e9+100;\n \n     \n \n const int N = 1e6+10;\n \n     \n \n int a[N], b[N], c[N];\n \n     \n \n LL f[N];\n \n     \n \n int n, tt;\n \n     \n \n void Add(int x){\n \n     while(x <= 3*n){\n \n         f[x] += 1;\n \n         x += low(x);\n \n     }\n \n }\n \n     \n \n int Query(int x){\n \n     int ans = 0;\n \n     while(x > 0){\n \n         ans += f[x];\n \n         x -= low(x);\n \n     }\n \n     return ans; \n \n }\n \n     \n \n bool find(int k){\n \n     mem(f, 0);\n \n     LL Ans = 0;\t\n \n     b[0] = 0;\n \n     go(i, 1, n) {\n \n         if (a[i] >= c[k])\n \n             b[i] = b[i-1] + 1;\n \n         else\n \n             b[i] = b[i-1];\n \n     }\n \n     go(i, 0, n) {\n \n         b[i] = 2*b[i] - i + n + 1;\n \n         Ans += Query(b[i]);\n \n         Add(b[i]);\n \n     }\n \n     LL t = (1LL * n * (n + 1)) / 2;\n \n     return Ans >= ((t + 1) / 2);\n \n }\n \n     \n \n int main(){\n \n     scanf(\"%d\", &n);\n \n     int l = 1, r = n;\n \n     go(i, 1, n){\n \n         scanf(\"%d\", &a[i]);\n \n         c[i] = a[i];\n \n     }\n \n     sort(c + 1, c + n + 1);\n \n     int ans = 0;\n \n     while(l <= r){\n \n         int mid = MID(l, r);\n \n         if (find(mid)){\n \n             ans = c[mid];\n \n             l = mid + 1;\n \n         }\n \n         else{\n \n             r = mid - 1;\n \n         }\n \n     }\n \n     printf(\"%d\\n\", ans);\n \n     return 0;\n \n }\n"}