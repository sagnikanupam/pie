{"optimized_code": "#include <cstdio>\n \n #include <cstring>\n \n #include <algorithm>\n \n #define ll long long\n \n #define MN 100005\n \n using namespace std;\n \n \n \n // Efficient input reading functions\n \n inline int read() {\n \n     int x = 0;\n \n     bool f = false;\n \n     char c = getchar();\n \n     while (c < '0' || c > '9') { \n \n         if (c == '-') f = true; \n \n         c = getchar(); \n \n     }\n \n     while (c >= '0' && c <= '9') { \n \n         x = x * 10 + (c - '0'); \n \n         c = getchar(); \n \n     }\n \n     return f ? -x : x;\n \n }\n \n \n \n inline ll readl() {\n \n     ll x = 0;\n \n     bool f = false;\n \n     char c = getchar();\n \n     while (c < '0' || c > '9') { \n \n         if (c == '-') f = true; \n \n         c = getchar(); \n \n     }\n \n     while (c >= '0' && c <= '9') { \n \n         x = x * 10 + (c - '0'); \n \n         c = getchar(); \n \n     }\n \n     return f ? -x : x;\n \n }\n \n \n \n int c[MN<<2], d[MN], sum[MN], a[MN], b[MN];\n \n int n, tot, l, r, res;\n \n ll num;\n \n \n \n inline void add(int x, int v){\n \n     for(int i = x; i <= ((n << 1) | 1); i += i & (-i)) \n \n         c[i] += v; \n \n }\n \n \n \n inline int query(int x){\n \n     int res = 0;\n \n     for(int i = x; i > 0; i -= i & (-i)) \n \n         res += c[i];\n \n     return res;\n \n }\n \n \n \n inline bool check(int x){\n \n     for(int i = 1; i <= n; ++i) \n \n         sum[i] = sum[i-1] + (a[i] > b[x]);\n \n     \n \n     for(int i = 1; i <= n; ++i) \n \n         d[i] = (sum[i] << 1) - i + n + 1;\n \n     d[0] = n + 1;\n \n     \n \n     memset(c, 0, sizeof(c));\n \n     add(d[0], 1);\n \n     num = 0LL;\n \n     \n \n     for(int i = 1; i <= n; ++i){\n \n         num += (ll)(query((n << 1) | 1) - query(d[i]));\n \n         add(d[i], 1);\n \n     }\n \n     \n \n     return (num > ((ll)n * (n + 1)) / 4LL);\n \n }\n \n \n \n int main(){\n \n     n = read();\n \n     for(int i = 1; i <= n; ++i) \n \n         a[i] = b[i] = read();\n \n     \n \n     sort(b + 1, b + n + 1);\n \n     tot = unique(b + 1, b + n + 1) - b - 1;\n \n     \n \n     l = 0; \n \n     r = tot; \n \n     res = 0;\n \n     \n \n     while(l <= r){\n \n         int mid = (l + r) >> 1;\n \n         if(check(mid)){\n \n             res = mid;\n \n             r = mid - 1;\n \n         }\n \n         else{\n \n             l = mid + 1;\n \n         }\n \n     }\n \n     \n \n     printf(\"%d\", b[res]);\n \n     return 0;\n \n }\n"}