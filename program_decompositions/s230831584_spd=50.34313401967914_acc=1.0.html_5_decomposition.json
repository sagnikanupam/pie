{"optimized_code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define IO ios::sync_with_stdio(false), cin.tie(0)\n\ntypedef long long ll;\n\nconst int inf = 999999999;\n\n// Debugging functions to improve debugging and output\nvoid __print(int x) {cerr << x;}\nvoid __print(long x) {cerr << x;}\nvoid __print(long long x) {cerr << x;}\nvoid __print(unsigned x) {cerr << x;}\nvoid __print(unsigned long x) {cerr << x;}\nvoid __print(unsigned long long x) {cerr << x;}\nvoid __print(float x) {cerr << x;}\nvoid __print(double x) {cerr << x;}\nvoid __print(long double x) {cerr << x;}\nvoid __print(char x) {cerr << '\\'' << x << '\\'';}\nvoid __print(const char *x) {cerr << '\"' << x << '\"';}\nvoid __print(const string &x) {cerr << '\"' << x << '\"';}\nvoid __print(bool x) {cerr << (x ? \"true\" : \"false\");}\ntemplate<typename T, typename V>\nvoid __print(const pair<T, V> &x);\ntemplate<typename T>\nvoid __print(const T &x);\ntemplate<typename T, typename V>\nvoid __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}\ntemplate<typename T>\nvoid __print(const T &x) {int f = 0; cerr << '{'; for(auto &i: x) cerr << (f++ ? \",\" : \"\"), __print(i); cerr << \"}\";}\nvoid _print() {cerr << \"]\\n\";}\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v) {__print(t); if(sizeof...(v)) cerr << \", \"; _print(v...);}\n#ifdef LOCAL\n#define debug(x...) cerr << \"[\" << #x << \"] = [\", _print(x)\n#else\n#define debug(x...)\n#endif\n\nint main()\n{\n    IO;\n\n    int n, k;\n    cin >> n >> k;\n\n    // Allocate memory with default initialization\n    vector<ll> arr(n + 1, 0); // Use 0 as default value for arr\n    vector<ll> dp(n + 1, inf); // Use inf as default value for dp\n\n    // Read input into arr in one go\n    for (int i = 1; i <= n; ++i)\n        cin >> arr[i];\n\n    dp[1] = 0;\n\n    for (int i = 1; i < n; ++i)\n    {\n        for (int j = i + 1; j <= min(n, i + k); ++j)\n        {\n            dp[j] = min(dp[j], dp[i] + abs(arr[j] - arr[i]));\n        }\n    }\n\n    cout << dp[n] << endl;\n}"}