{"optimized_code": "#include <bits/stdc++.h>\n\n#define mem(x,v) memset(x,v,sizeof(x)) \n\n#define go(i,a,b)  for (int i = a; i <= b; i++)\n\n#define og(i,a,b)  for (int i = a; i >= b; i--)\n\n#define MID(a,b) (a + b) >> 1\n\n#define lson now << 1\n\n#define rson now << 1 | 1\n\n#define low(x) (x & (-x))\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst double EPS = 1e-10;\n\nconst int INF = 1e9+100;\n\nconst int N = 1e6+10;\n\nint a[N], b[N];\n\nLL f[4*N];\n\nint n, tt;\n\nvoid Add(int x) {\n    while (x <= 4 * n) {\n        f[x] += 1;\n        x += low(x);\n    }\n}\n\nint Query(int x) {\n    int ans = 0;\n    while (x > 0) ans += f[x], x -= low(x);\n    return ans; \n}\n\nbool check(int min_val, int max_val) {\n    mem(f, 0);\n    LL Ans = 0; b[0] = 0;\n\n    go(i, 1, n) {\n        b[i] = (a[i] >= min_val) ? (b[i-1] + 1) : b[i-1];\n    }\n\n    go(i, 0, n) {\n        b[i] = 2 * b[i] - i + n + 1;\n        Ans += Query(b[i]);\n        Add(b[i]);\n    }\n\n    LL t = (1LL * n * (n + 1)) / 2;\n    return Ans >= (t + 1) / 2;\n}\n\nint main() {\n    scanf(\"%d\", &n);\n    int l = INT_MAX, r = INT_MIN;\n\n    go(i, 1, n) {\n        scanf(\"%d\", &a[i]);\n        l = min(l, a[i]);\n        r = max(r, a[i]);\n    }\n\n    int ans = 0;\n    int low_val = 1, high_val = n;\n\n    while (low_val <= high_val) {\n        int mid = MID(low_val, high_val);\n        if (check(mid, mid)) low_val = mid + 1, ans = mid; \n        else high_val = mid - 1;\n    }\n\n    printf(\"%d\\n\", ans);\n    return 0;\n}"}