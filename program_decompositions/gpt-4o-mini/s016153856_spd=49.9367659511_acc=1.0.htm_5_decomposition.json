{"optimized_code": "#include <bits/stdc++.h>\n\n#define endl \"\\n\"\n#define ll long long int\n#define vi vector<int>\n#define vll vector<ll>\n#define vvi vector < vi >\n#define pii pair<int,int>\n#define pll pair<long long, long long>\n#define mod 1000000007\n#define inf 1000000000000000001\n#define all(c) c.begin(),c.end()\n#define mp(x,y) make_pair(x,y)\n#define mem(a,val) memset(a,val,sizeof(a))\n#define pb push_back\n#define f first\n#define se second\n\nusing namespace std;\n\nll k2;\nvector<ll> arr;\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    ll n = 0;\n    cin >> n >> k2;\n\n    arr.resize(n);\n    for (ll i = 0; i < n; ++i) {\n        cin >> arr[i];\n    }\n\n    vector<ll> dp(n, inf);\n    dp[n - 1] = 0;\n    deque<ll> dq;\n    dq.push_back(n - 1);\n\n    for (ll cur = n - 2; cur >= 0; --cur) {\n        // Remove indices that are not reachable\n        while (!dq.empty() && dq.front() - cur > k2) {\n            dq.pop_front();\n        }\n        // If deque is not empty, calculate the minimum cost\n        if (!dq.empty()) {\n            dp[cur] = dp[dq.front()] + abs(arr[cur] - arr[dq.front()]);\n        }\n        // Maintain the deque for minimum values\n        while (!dq.empty() && dp[dq.back()] >= dp[cur]) {\n            dq.pop_back();\n        }\n        dq.push_back(cur);\n    }\n\n    cout << dp[0];\n    return 0;\n}"}