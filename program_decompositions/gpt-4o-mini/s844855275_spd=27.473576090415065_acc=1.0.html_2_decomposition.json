{"optimized_code": "#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <map>\n\n#define mem(u, v) memset(u, v, sizeof(u))\n#define INF 0x3f3f3f3f\n#define LOWBIT(x) (x & -(x))\n\nusing namespace std;\n\nconst int MAXN = 1e6 + 7;\n\nstruct Element {\n    int value;\n    int position;\n};\n\nElement a[MAXN], sum[MAXN], c[MAXN];\nint n;\nlong long ans0;\n\nvoid add(int x) {\n    while (x <= 5 * n) {\n        c[x].value += 1;\n        x += LOWBIT(x);\n    }\n}\n\nint get(int x) {\n    int y = 0;\n    while (x > 0) {\n        y += c[x].value;\n        x -= LOWBIT(x);\n    }\n    return y;\n}\n\nbool check(int threshold) {\n    sum[0].value = 0;\n    for (int i = 1; i <= n; i++) {\n        sum[i].value = sum[i - 1].value + (a[i].value >= threshold);\n    }\n    for (int i = 0; i <= n; i++) {\n        sum[i].value = 2 * sum[i].value - i + n + 1;\n    }\n    long long total = 0;\n    mem(c, 0);\n    for (int i = 0; i <= n; i++) {\n        total += get(sum[i].value);\n        add(sum[i].value);\n    }\n    return total >= ans0;\n}\n\nint main() {\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%d\", &a[i].value);\n        a[i].position = i;\n    }\n    sort(a + 1, a + n + 1, [](const Element &x, const Element &y) { return x.value < y.value; });\n    int l = 1, r = n, ans = 0;\n    ans0 = (1LL * n * (n - 1) / 2 + n + 1) / 2LL;\n    while (l <= r) {\n        int mid = (l + r) / 2;\n        if (check(a[mid].value)) ans = mid, l = mid + 1;\n        else r = mid - 1;\n    }\n    printf(\"%d\\n\", a[ans].value);\n    return 0;\n}"}