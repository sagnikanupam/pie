{"optimized_code": "#include <bits/stdc++.h>\n\n#define mem(x,v) memset(x,v,sizeof(x)) \n\n#define go(i,a,b)  for (int i = a; i <= b; i++)\n\n#define og(i,a,b)  for (int i = a; i >= b; i--)\n\n#define MID(a,b) ((a) + (b)) >> 1\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst double EPS = 1e-10;\n\nconst int INF = 1e9+100;\n\nconst int N = 1e6+10;\n\nint a[N], b[N], c[N];\n\nint fenwick_tree[3*N+1];\n\nint n, tt;\n\nvoid fenwick_update(int x, int delta) {\n    while(x <= 3 * n) {\n        fenwick_tree[x] += delta;\n        x += (x & -x);\n    }\n}\n\nint fenwick_query(int x) {\n    int sum = 0;\n    while(x > 0) {\n        sum += fenwick_tree[x];\n        x -= (x & -x);\n    }\n    return sum;\n}\n\nbool find(int k) {\n    mem(fenwick_tree, 0);\n    LL Ans = 0;\n    b[0] = 0;\n    go(i, 1, n) {\n        if (a[i] >= c[k]) b[i] = b[i-1] + 1; \n        else b[i] = b[i-1];\n    }\n    go(i,0,n) {\n        b[i] = 2 * b[i] - i + n + 1;\n        Ans += fenwick_query(b[i]);\n        fenwick_update(b[i], 1);\n    }\n    LL t = (1LL * n * (n + 1)) / 2;\n    return Ans >= (t + 1) / 2;\n}\n\nint main() {\n    scanf(\"%d\", &n);\n    int l = 1, r = n;\n    go(i, 1, n){\n        scanf(\"%d\", &a[i]);\n        c[i] = a[i];\n    }\n    sort(c + 1, c + n + 1);\n    int ans = 0;\n    while(l <= r) {\n        int mid = MID(l, r);\n        if (find(mid)) {\n            l = mid + 1;\n            ans = c[mid];\n        } else {\n            r = mid - 1;\n        }\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n"}