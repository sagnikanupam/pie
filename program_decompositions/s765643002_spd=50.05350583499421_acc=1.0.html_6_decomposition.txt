```cpp
#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define BUG cout << "************\n"

using namespace std;

typedef long long LL;

const double EPS = 1e-10;

const int INF = 1e9+100;

const int N = 1e6+10;

int a[N], b[N], c[N];
int r_sorted[N];
LL f_tree[N];
ll n, m;

void Add(int x, int size){
    while(x <= size){
        f_tree[x] += 1;
        x += (x & -x);
    }
}

int Query(int x){
    int ans = 0;
    while(x > 0){
        ans += f_tree[x];
        x -= (x & -x);
    }
    return ans; 
}

bool check(int k){
    memset(f_tree, 0, sizeof(LL) * (n + 2));
    LL Ans = 0;	
    b[0] = 0;
    for(int i = 1; i <= n; i++) {
        if (a[i] >= c[k])
            b[i] = b[i-1] + 1;
        else
            b[i] = b[i-1];
    }
    
    // Populate r_sorted with transformed b[i]
    for(int i = 0; i <= n; i++) {
        r_sorted[i] = 2 * b[i] - i + n + 1;
    }
    
    // Sort and remove duplicates for coordinate compression
    sort(r_sorted, r_sorted + n + 1);
    int unique_size = unique(r_sorted, r_sorted + n + 1) - r_sorted;
    
    // Replace b[i] with their ranks
    for(int i = 0; i <= n; i++) {
        b[i] = lower_bound(r_sorted, r_sorted + unique_size, r_sorted[i]) - r_sorted + 1;
    }
    
    for(int i = 0; i <= n; i++) {
        Ans += Query(b[i]);
        Add(b[i], unique_size);
    }
    
    LL t = (1LL * n * (n + 1)) / 2;
    return Ans >= ((t + 1) / 2);
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    
    cin >> n;
    ll l = 1, r = n;
    for(int i = 1; i <= n; i++){
        cin >> a[i];
        c[i] = a[i];
    }
    sort(c + 1, c + n + 1);
    int ans = 0;
    while(l <= r){
        ll mid = (l + r) >> 1;
        if (check(mid)){
            ans = c[mid];
            l = mid + 1;
        }
        else{
            r = mid - 1;
        }
    }
    cout << ans << "\n";
    return 0;
}
```