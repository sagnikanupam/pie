{"optimized_code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Range {\npublic:\n    class Iterator {\n    public:\n        Iterator(int current) : current_value(current) {}\n        int operator*() const { return current_value; }\n        Iterator& operator++() { ++current_value; return *this; }\n        bool operator!=(const Iterator& other) const { return current_value != other.current_value; }\n    private:\n        int current_value;\n    };\n\n    Range(int start, int end) : start_value(start), end_value(end) {}\n    Iterator begin() const { return Iterator(start_value); }\n    Iterator end() const { return Iterator(end_value); }\nprivate:\n    int start_value, end_value;\n};\n\nint main() {\n    string s1, s2;\n    cin >> s1 >> s2;\n    int n = s1.size(), m = s2.size();\n\n    vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));\n\n    for (int i : Range(0, m + 1)) dp[0][i] = i;\n\n    for (int i : Range(0, n + 1)) dp[i][0] = i;\n\n    for (int i : Range(1, n + 1)) {\n        for (int j : Range(1, m + 1)) {\n            dp[i][j] = dp[i - 1][j - 1];\n            if (s1[i - 1] != s2[j - 1]) dp[i][j] += 1;\n            int temp = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1);\n            dp[i][j] = min(temp, dp[i][j]);\n        }\n    }\n\n    cout << dp[n][m] << endl;\n\n    return 0;\n}"}