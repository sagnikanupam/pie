{"optimized_code": "#include <bits/stdc++.h>\n\n#define mem(x,v) memset(x,v,sizeof(x)) \n\n#define go(i,a,b)  for (int i = a; i <= b; i++)\n\n#define og(i,a,b)  for (int i = a; i >= b; i--)\n\n#define MID(a,b) ((a) + (b)) / 2\n\n#define lson now << 1\n\n#define rson now << 1 | 1\n\n#define low(x) (x & (-x))\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst double EPS = 1e-10;\n\nconst int INF = 1e9+100;\n\nconst int N = 1e6+10;\n\nint a[N],b[N];\n\nLL f[4 * N];\n\nint n,tt;\n\nbool check(int k) {\n    static int prev_k = -1; // Variable to keep track of the last k value\n    static bool recalculated = false; // Keep track of recalculation necessity\n    \n    if (k != prev_k) {\n        mem(f, 0);\n        b[0] = 0;\n        prev_k = k;\n        recalculated = false;\n    }\n\n    if (!recalculated) {\n        go(i,1,n) b[i] = (a[i] >= k) ? b[i-1] + 1 : b[i-1];\n\n        go(i, 0, n) {\n            b[i] = 2 * b[i] - i + n + 1;\n            f[0] += Query(b[i]);\n            Add(b[i]);\n        }\n\n        recalculated = true;\n    }\n\n    LL t = (1LL * n * (n + 1)) / 2;\n    return f[0] >= (t + 1) / 2;\n}\n\nvoid Add(int x) {\n    while (x <= 4 * n) {\n        f[x] += 1;\n        x += low(x);\n    }\n}\n\nint Query(int x) {\n    int ans = 0;\n    while (x > 0) ans += f[x], x -= low(x);\n    return ans; \n}\n\nint main() {\n    scanf(\"%d\", &n);\n    int l = INF, r = -INF;\n    go(i, 1, n) {\n        scanf(\"%d\", &a[i]);\n        l = min(l, a[i]);\n        r = max(r, a[i]);\n    }\n    \n    int ans = 0;\n    while (l <= r) {\n        int mid = MID(l, r);\n        if (check(mid)) l = mid + 1, ans = mid; else r = mid - 1;\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}"}