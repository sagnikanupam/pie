{"optimized_code": "\n/*\n\nCode By RyeCatcher\n\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n#define ri register int\n#define ll long long\n#define ull unsigned long long\nconst int maxn = 200005;\nconst int inf = 0x7fffffff;\nint n, a[maxn], c[maxn], mx = -inf, mi = inf;\nll sum[maxn << 2];\ninline void read(int &x) {\n    x = 0; int ne = 0; char c;\n    while (!isdigit(c = getchar())) ne = c == '-';\n    x = c - 48;\n    while (isdigit(c = getchar())) x = (x << 3) + (x << 1) + c - 48;\n    x = ne ? -x : x; return;\n}\ninline void update(int x, int d) {\n    for (; x <= n; x += x & (-x)) sum[x] += d;\n}\ninline ll query(int x) {\n    ll ans = 0; for (; x; x -= x & (-x)) ans += sum[x];\n    return ans;\n}\ninline ll chk(int k) {\n    ll ans = 0; c[0] = 0;\n    int d[maxn << 1], idx = n, offset = n + 1; // single array and offset\n    d[offset] = 0; \n    memset(sum, 0, sizeof(sum));\n    update(offset, 1);\n    for (ri i = 1; i <= n; i++) {\n        c[i] = c[i - 1] + ((a[i] <= k) ? 1 : -1);\n        ans += query(maxn + c[i] - 1);\n        update(maxn + c[i], 1);\n    }\n    return ans;\n}\nint main() {\n    read(n);\n    for (ri i = 1; i <= n; i++) {\n        read(a[i]);\n        mi = min(mi, a[i]), mx = max(mx, a[i]);\n    }\n    int L = mi, R = mx, mid, ans;\n    ll lim = 1LL * n * (n + 1) / 4 + 1; // use 1LL for long long\n    while (L <= R) {\n        mid = L + ((R - L) >> 1);\n        if (chk(mid) >= lim) ans = mid, R = mid - 1;\n        else L = mid + 1;\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n"}