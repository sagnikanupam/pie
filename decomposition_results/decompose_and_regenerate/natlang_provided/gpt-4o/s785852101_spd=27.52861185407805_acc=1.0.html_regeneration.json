{"optimized_code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nclass _in {\npublic:\n    struct iterator {\n        explicit iterator(int x) : n(x) {}\n\n        int operator*() const { return n; }\n\n        iterator& operator++() {\n            ++n;\n            return *this;\n        }\n\n        bool operator!=(const iterator& rhs) const { return n != rhs.n; }\n\n    private:\n        int n;\n    };\n\n    _in(int from, int to) : f(from), t(to) {}\n\n    iterator begin() const { return iterator(f); }\n    iterator end() const { return iterator(t); }\n\nprivate:\n    const int f, t;\n};\n\nint main() {\n    string s1, s2;\n    cin >> s1 >> s2;\n\n    int n = s1.size(), m = s2.size();\n    vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));\n\n    for (int i : _in(0, m + 1)) {\n        dp[0][i] = i;\n    }\n    for (int i : _in(0, n + 1)) {\n        dp[i][0] = i;\n    }\n\n    for (int i : _in(1, n + 1)) {\n        for (int j : _in(1, m + 1)) {\n            dp[i][j] = dp[i - 1][j - 1];\n            if (s1[i - 1] != s2[j - 1]) {\n                ++dp[i][j];\n            }\n            int temp = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1);\n            dp[i][j] = min(temp, dp[i][j]);\n        }\n    }\n\n    cout << dp[n][m] << endl;\n    return 0;\n}\n"}