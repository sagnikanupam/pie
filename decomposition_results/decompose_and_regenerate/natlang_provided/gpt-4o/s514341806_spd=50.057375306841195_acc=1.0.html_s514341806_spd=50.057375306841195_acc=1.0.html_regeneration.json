{"optimized_code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 1e6 + 10;\n\nint a[N], b[N];\nlong long BIT[4 * N];\n\nint n;\n\nvoid Add(int x) {\n    while (x < 4 * n) {\n        BIT[x] += 1;\n        x += x & (-x);\n    }\n}\n\nint Query(int x) {\n    int ans = 0;\n    while (x > 0) {\n        ans += BIT[x];\n        x -= x & (-x);\n    }\n    return ans;\n}\n\nbool check(int k) {\n    memset(BIT, 0, sizeof(long long) * (4 * n));\n    long long Ans = 0;\n    int sum = n + 1;\n\n    for (int i = 1; i <= n; ++i) {\n        if (a[i] >= k) {\n            sum++;\n        } else {\n            sum--;\n        }\n        Ans += Query(sum);\n        Add(sum);\n    }\n\n    long long t = (1LL * n * (n + 1)) / 2;\n    return Ans >= (t + 1) / 2;\n}\n\nint main() {\n    scanf(\"%d\", &n);\n\n    int min_a = INT_MAX, max_a = INT_MIN;\n    for (int i = 1; i <= n; ++i) {\n        scanf(\"%d\", &a[i]);\n        min_a = min(min_a, a[i]);\n        max_a = max(max_a, a[i]);\n    }\n\n    int l = min_a, r = max_a, ans = 0;\n    while (l <= r) {\n        int mid = (l + r) / 2;\n        if (check(mid)) {\n            ans = mid;\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n\n    printf(\"%d\\n\", ans);\n    return 0;\n}"}