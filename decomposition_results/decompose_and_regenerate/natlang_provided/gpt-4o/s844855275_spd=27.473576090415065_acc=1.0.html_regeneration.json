{"optimized_code": "#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#include <vector>\n#include <map>\n\n#define mem(u, v) memset(u, v, sizeof(u))\n#define INF 0x3f3f3f3f\n#define LL long long\n#define mid ((l + r) / 2)\n#define lowbit(x) ((x) & -(x))\n\nusing namespace std;\n\nconst int MAXN = 1e6 + 7;\n\nstruct Node {\n    int value, pos;\n};\n\nNode arr[MAXN];\nint bit[MAXN], n;\nLL tot;\n\nvoid update(int x) {\n    while (x <= 5 * n) {\n        bit[x] += 1;\n        x += lowbit(x);\n    }\n}\n\nint getsum(int x) {\n    int y = 0;\n    while (x > 0) {\n        y += bit[x];\n        x -= lowbit(x);\n    }\n    return y;\n}\n\nbool check(int x) {\n    int sum = 0;\n    vector<int> prefixSums(n + 1);\n    prefixSums[0] = n + 1;\n\n    for (int i = 1; i <= n; i++) {\n        sum += (arr[i].value >= x ? 1 : 0);\n        prefixSums[i] = 2 * sum - i + n + 1;\n    }\n\n    LL ans1 = 0;\n    mem(bit, 0);\n\n    for (int i = 0; i <= n; i++) {\n        ans1 += getsum(prefixSums[i]);\n        update(prefixSums[i]);\n    }\n\n    return ans1 >= tot;\n}\n\nint main() {\n    scanf(\"%lld\", &n);\n\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%d\", &arr[i].value);\n        arr[i].pos = i;\n    }\n\n    sort(arr + 1, arr + n + 1, [](Node a, Node b) { return a.value < b.value; });\n\n    tot = (1LL * n * (n - 1) / 2 + n + 1) / 2LL;\n\n    int l = 1, r = n, ans = 0;\n\n    while (l <= r) {\n        if (check(arr[mid].value)) {\n            ans = mid;\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n\n    printf(\"%d\\n\", arr[ans].value);\n\n    return 0;\n}"}