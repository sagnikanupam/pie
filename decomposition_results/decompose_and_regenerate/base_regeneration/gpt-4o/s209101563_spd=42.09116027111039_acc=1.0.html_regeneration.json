{"optimized_code": "#include <bits/stdc++.h>\n\n#define ll long long\n\nusing namespace std;\n\n// Use inline to avoid function call overhead\ninline int D() {\n    int t;\n    scanf(\"%d\", &t);\n    return t;\n}\n\ninline ll llD() {\n    ll t;\n    scanf(\"%lld\", &t);\n    return t;\n}\n\nconst int Max = 1e6 + 9;\nconst int OO = -1e6;\n\nint n, m;\n\nll mem[Max];\n\n// Initialize memory\nvoid init() {\n    fill(mem, mem + n, -1); // Use fill instead of memset for better performance\n}\n\nll a[Max];\n\n// Recursive solution function\nll solve(int i) {\n    if (i == n - 1) return 0;\n    if (i >= n) return Max;\n\n    ll &ret = mem[i];\n    if (ret != -1) return ret;\n\n    ret = 1e9;\n    for (int j = 1; j <= m; j++) { // Start j from 1 to avoid self-comparison and out-of-bound\n        if (i + j < n) { // Add boundary check\n            ret = min(ret, solve(i + j) + abs(a[i] - a[i + j]));\n        }\n    }\n\n    return ret;\n}\n\nint main() {\n    Fast(); // Enable fast IO\n    n = D();\n    m = D();\n    for (int i = 0; i < n; i++) {\n        a[i] = llD();\n    }\n    init();\n    printf(\"%lld\", solve(0));\n    return 0;\n}"}