{"optimized_code": "#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#include <vector>\n#include <map>\n\n#define MAXN 1000007\n#define LL long long\n\nusing namespace std;\n\nint a[MAXN], b[MAXN], sum[MAXN], c[MAXN], n;\nLL ans0;\n\ninline void add(int x){\n    while (x <= 5 * n){\n        c[x]++;\n        x += x & -x;\n    }\n}\n\ninline int get(int x){\n    int y = 0;\n    while (x > 0){\n        y += c[x];\n        x -= x & -x;\n    }\n    return y;\n}\n\nbool judge(int x){\n    sum[0] = 0;\n    for (int i = 1; i <= n; i++){\n        sum[i] = sum[i - 1] + (a[i] >= x ? 1 : 0);\n    }\n    for (int i = 0; i <= n; i++)\n        sum[i] = 2 * sum[i] - i + n + 1;\n\n    LL ans1 = 0;\n    memset(c, 0, sizeof(c));\n    for (int i = 0; i <= n; i++){\n        ans1 += get(sum[i]);\n        add(sum[i]);\n    }\n    return ans1 >= ans0;\n}\n\nint main(){\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%d\", &a[i]);\n        b[i] = a[i];\n    }\n\n    sort(b + 1, b + n + 1);\n\n    int l = 1, r = n, ans = 0;\n    ans0 = ((1LL * n * (n - 1) / 2 + n + 1) / 2LL);\n\n    while (l <= r){\n        int m = (l + r) / 2;\n        if (judge(b[m])){\n            ans = m;\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n\n    printf(\"%d\\n\", b[ans]);\n    return 0;\n}\n"}