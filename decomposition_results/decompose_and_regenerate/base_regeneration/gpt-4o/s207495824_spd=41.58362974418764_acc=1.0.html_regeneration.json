{"optimized_code": "#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cctype>\n#include <iostream>\n#include <algorithm>\n#include <ext/pb_ds/hash_policy.hpp>\n#include <ext/pb_ds/assoc_container.hpp>\n\nusing ll = long long;\nusing std::min;\nusing std::max;\nusing std::lower_bound;\nusing namespace __gnu_pbds;\n\nconstexpr int maxn = 200005;\nconstexpr int inf = 0x7fffffff;\n\nint n, nn;\nint a[maxn], b[maxn], c[maxn];\nint mx = -inf, mi = inf;\nll sum[maxn << 2];\n\ninline void read(int &x) {\n    x = 0;\n    int ne = 0;\n    char c;\n    while (!isdigit(c = getchar())) ne = c == '-';\n    x = c - '0';\n    while (isdigit(c = getchar())) x = (x << 3) + (x << 1) + c - '0';\n    x = ne ? -x : x;\n}\n\ninline void update(int x, int d) {\n    for (; x <= nn; x += x & (-x)) sum[x] += d;\n}\n\ninline ll query(int x) {\n    ll ans = 0;\n    for (; x; x -= x & (-x)) ans += sum[x];\n    return ans;\n}\n\ninline ll chk(int k) {\n    ll ans = 0;\n    b[0] = 0;\n    for (int i = 1; i <= n; i++) {\n        b[i] = b[i - 1] + ((a[i] <= k) ? 1 : -1);\n        c[i] = b[i];\n        ans += (b[i] > 0);\n    }\n\n    std::sort(c + 1, c + 1 + n);\n    nn = std::unique(c + 1, c + 1 + n) - (c + 1);\n    memset(sum, 0, sizeof(sum[0]) * (nn + 1));\n\n    for (int i = 1; i <= n; i++) {\n        b[i] = lower_bound(c + 1, c + 1 + nn, b[i]) - c;\n        ans += query(b[i] - 1);\n        update(b[i], 1);\n    }\n\n    return ans;\n}\n\nint main() {\n    read(n);\n    for (int i = 1; i <= n; i++) {\n        read(a[i]);\n        mi = min(mi, a[i]);\n        mx = max(mx, a[i]);\n    }\n\n    int L = mi, R = mx, ans;\n    ll lim = 1ll * n * (n + 1) / 4 + 1;\n    while (L <= R) {\n        int mid = (L + R) >> 1;\n        if (chk(mid) >= lim) {\n            ans = mid;\n            R = mid - 1;\n        } else {\n            L = mid + 1;\n        }\n    }\n\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n"}