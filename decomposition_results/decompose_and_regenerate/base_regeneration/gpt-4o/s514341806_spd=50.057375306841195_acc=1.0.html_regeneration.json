{"optimized_code": "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int N = 1e6 + 10;\n\nint a[N], b[N], c[N];\nLL f[N];\nint n;\n\ninline int low(int x) {\n    return x & (-x);\n}\n\nvoid add(int x) {\n    while (x <= 5 * n) {\n        f[x] += 1;\n        x += low(x);\n    }\n}\n\nint query(int x) {\n    int ans = 0;\n    while (x > 0) {\n        ans += f[x];\n        x -= low(x);\n    }\n    return ans;\n}\n\nbool find(int k) {\n    memset(f, 0, sizeof(f));\n    LL Ans = 0;\n    b[0] = 0;\n    for (int i = 1; i <= n; i++) {\n        b[i] = (a[i] >= c[k]) ? b[i-1] + 1 : b[i-1];\n    }\n    for (int i = 0; i <= n; i++) {\n        b[i] = 2 * b[i] - i + n + 1;\n        Ans += query(b[i]);\n        add(b[i]);\n    }\n    LL t = (1LL * n * (n + 1)) / 2;\n    return Ans >= (t + 1) / 2;\n}\n\nint main() {\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%d\", &a[i]);\n        c[i] = a[i];\n    }\n    sort(c + 1, c + n + 1);\n    int l = 1, r = n, ans = 0;\n    while (l <= r) {\n        int mid = (l + r) >> 1;\n        if (find(mid)) {\n            l = mid + 1;\n            ans = c[mid];\n        } else {\n            r = mid - 1;\n        }\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n"}