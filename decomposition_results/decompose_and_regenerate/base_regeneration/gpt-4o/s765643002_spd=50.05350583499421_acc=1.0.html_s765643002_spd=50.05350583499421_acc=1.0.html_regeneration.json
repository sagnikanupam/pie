{"optimized_code": "#include <bits/stdc++.h>\n\n#define mem(x,v) memset(x,v,sizeof(x)) \n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int N = 1e6+10;\n\nint a[N], b[N], c[N];\nLL f[N];\nint n, tt;\n\nvoid Add(int x) {\n    for(; x <= 3*n; x += x & (-x))\n        f[x] += 1;\n}\n\nint Query(int x) {\n    int ans = 0;\n    for(; x > 0; x -= x & (-x))\n        ans += f[x];\n    return ans; \n}\n\nbool find(int k) {\n    mem(f, 0);\n    LL Ans = 0;\n    b[0] = 0;\n\n    for(int i = 1; i <= n; ++i)\n        b[i] = b[i-1] + (a[i] >= c[k] ? 1 : 0);\n\n    for(int i = 0; i <= n; ++i) {\n        b[i] = 2*b[i] - i + n + 1;\n        Ans += Query(b[i]);\n        Add(b[i]);\n    }\n\n    LL t = 1LL * n * (n + 1) / 2;\n    return Ans >= (t+1) / 2;\n}\n\nint main() {\n    scanf(\"%d\", &n);\n    for(int i = 1; i <= n; ++i) {\n        scanf(\"%d\", &a[i]);\n        c[i] = a[i];\n    }\n\n    sort(c + 1, c + n + 1);\n\n    int l = 1, r = n, ans = 0;\n    while(l <= r) {\n        int mid = (l + r) / 2;\n        if(find(mid)) {\n            ans = c[mid];\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n"}